import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
import { getAuth, signInWithCustomToken, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
import { getFirestore, doc, setDoc, getDoc, collection, onSnapshot, addDoc, deleteDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyDhOG6mUIYzRRxgrINmP-sef_Z3jufqauw",
  authDomain: "farminghubsaksham.firebaseapp.com",
  projectId: "farminghubsaksham",
  storageBucket: "farminghubsaksham.firebasestorage.app",
  messagingSenderId: "361791915485",
  appId: "1:361791915485:web:b097bed6af1319d14ea234",
  measurementId: "G-27EF1PBHJ3"
};
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// Global state variables
window.currentUser = null;
let recipesData = [];
let seedData = {};
let pesticideData = {};
let reviewsData = [];

// --- Simulated User Login ---
// These functions bypass email/password authentication for a direct access experience
async function loginAsUser() {
    // A mock UID and role to simulate a successful user login
    window.currentUser = { uid: "user123", email: "guest@user.com", role: "user" };
    updateUIForLoggedInUser();
}

async function loginAsAdmin() {
    // A mock UID and role to simulate a successful admin login
    window.currentUser = { uid: "admin456", email: "admin@farminghub.com", role: "admin" };
    updateUIForLoggedInUser();
}

function updateUIForLoggedInUser() {
    document.getElementById('role-selection-section').classList.remove('active');
    document.getElementById('role-selection-section').classList.add('hidden');
    document.getElementById('nav-and-content').classList.remove('hidden');

    if (window.currentUser.role === 'admin') {
        document.body.classList.add('admin-theme');
        document.getElementById('admin-nav-link').classList.remove('hidden');
    } else {
        document.body.classList.remove('admin-theme');
        document.getElementById('admin-nav-link').classList.add('hidden');
    }
    showSection('home-section');
}

function userLogout() {
    window.currentUser = null;
    document.getElementById('role-selection-section').classList.remove('hidden');
    document.getElementById('role-selection-section').classList.add('active');
    document.getElementById('nav-and-content').classList.add('hidden');
    document.getElementById('admin-nav-link').classList.add('hidden');
    document.body.classList.remove('admin-theme');
}

// --- Data Fetching and Real-time Listeners ---
function fetchAllData() {
    onSnapshot(collection(db, "recipes"), (snapshot) => {
        recipesData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        renderRecipes(recipesData);
    });
    onSnapshot(collection(db, "seedData"), (snapshot) => {
        seedData = snapshot.docs.reduce((acc, doc) => ({ ...acc, [doc.id]: doc.data() }), {});
        updateSeedDropdown();
    });
    onSnapshot(collection(db, "pesticideData"), (snapshot) => {
        pesticideData = snapshot.docs.reduce((acc, doc) => ({ ...acc, [doc.id]: doc.data() }), {});
        updatePesticideDropdown();
    });
    onSnapshot(collection(db, "reviews"), (snapshot) => {
        reviewsData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        renderReviews(reviewsData);
        renderAdminReviews();
    });
}

// Data and translation objects
const translations = {
    en: {
        nav_home: "Home", nav_recipes: "Recipes", nav_tools: "Tools", nav_reviews: "Reviews", nav_chatbot: "Chat Bot", nav_admin: "Admin", nav_logout: "Logout",
        home_title: "Welcome to Farming Hub", home_subtitle: "Your one-stop destination for organic farming knowledge, sustainable practices, and community support.",
        recipes_title: "Organic Pesticide Recipes", recipes_subtitle: "Discover natural, homemade solutions for common garden pests.", recipes_search_placeholder: "Search by name, target, or crop...", recipes_no_found: "No recipes found. Try a different search term.", recipes_card_targets: "ЁЯОп Targets:", recipes_card_where: "ЁЯУН Where to Use:", recipes_card_ingredients: "ЁЯз╛ Ingredients:", recipes_card_procedure: "тЪЩя╕П Procedure:", recipes_card_usage: "ЁЯТб How to Use:", recipes_card_cost: "ЁЯТ░ Approximate Cost:",
        tools_title: "Farming Tools & Calculators", tools_subtitle: "Use our interactive tools to plan your farming activities efficiently.", calc_seeds_title: "Sowing Seeds Calculator", calc_seeds_label1: "Land Size (in acres)", calc_seeds_label2: "Seed Type", calc_seeds_button: "Calculate Seeds", calc_seeds_result: (amount, type, size) => `You will need approximately <strong>${amount} kg</strong> of ${type} seeds for ${size} acres.`, calc_seeds_error: "Please enter a valid land size.",
        calc_pesticides_title: "Pesticides Spreading Calculator", calc_pesticides_label1: "Land Size (in acres)", calc_pesticides_label2: "Pesticide Type", calc_pesticides_button: "Calculate Pesticides", calc_pesticides_result: (amount, type, size) => `You will need approximately <strong>${amount} L</strong> of ${type} for ${size} acres.`, calc_pesticides_error: "Please enter a valid land size.",
        reviews_title: "Customer Reviews", review_form_title: "Leave a Review", review_label: "Your Review", review_button: "Submit Review",
        chatbot_title: "Farming Assistant Chat Bot", chatbot_subtitle: "Ask our AI assistant for advice on pests, recipes, or general farming tips.", chatbot_initial_msg: "Hello! I'm your farming assistant. How can I help you today?", chatbot_typing: "Bot is typing...", chatbot_send_btn: "Send", chatbot_user_label: "You:", chatbot_bot_label: "Bot:", chatbot_placeholder: "Type your question here...", chatbot_static_response: `I'm an AI assistant. I can't generate new content right now, but I can help you search the recipes. Try searching for "aphids" or "fungal" in the recipes section!`, chatbot_error: "Error: Failed to get response. Please try again.",
        footer_text: "┬й 2025 Farming Hub. All rights reserved. Made by Saksham Bhor | Email:",
        admin_dashboard_title: "Admin Dashboard", admin_recipes_title: "Manage Recipes", admin_recipes_id_label: "Recipe ID (for update/delete)", admin_recipes_name_label: "Recipe Name", admin_recipes_targets_label: "Targets (comma-separated)", admin_recipes_cost_label: "Approximate Cost (тВ╣)", admin_add_recipe: "Add/Update", admin_delete_recipe: "Delete", admin_calc_title: "Manage Calculator Data", admin_calc_type_label: "Type", admin_calc_key_label: "Key (e.g., 'corn')", admin_calc_name_label: "Name", admin_calc_amount_label: "Amount (kg or L)", admin_add_calc: "Add/Update", admin_delete_calc: "Delete", admin_reviews_title: "Manage Reviews",
    },
    hi: {
        nav_home: "рд╣реЛрдо", nav_recipes: "рд░реЗрд╕рд┐рдкреА", nav_tools: "рдЯреВрд▓", nav_reviews: "рд░рд┐рд╡реНрдпреВ", nav_chatbot: "рдЪреИрдЯ рдмреЙрдЯ", nav_admin: "рдПрдбрдорд┐рди", nav_logout: "рд▓реЙрдЧрдЖрдЙрдЯ",
        home_title: "рдлрд╝рд╛рд░реНрдорд┐рдВрдЧ рд╣рдм рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ", home_subtitle: "рдЬреИрд╡рд┐рдХ рдЦреЗрддреА рдХреЗ рдЬреНрдЮрд╛рди, рдЯрд┐рдХрд╛рдК рдкреНрд░рдерд╛рдУрдВ рдФрд░ рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдЖрдкрдХрд╛ рд╡рди-рд╕реНрдЯреЙрдк рдбреЗрд╕реНрдЯрд┐рдиреЗрд╢рдиред",
        recipes_title: "рдЬреИрд╡рд┐рдХ рдХреАрдЯрдирд╛рд╢рдХ рд░реЗрд╕рд┐рдкреА", recipes_subtitle: "рдЖрдо рдмрдЧреАрдЪреЗ рдХреЗ рдХреАрдЯреЛрдВ рдХреЗ рд▓рд┐рдП рдкреНрд░рд╛рдХреГрддрд┐рдХ, рдШрд░ рдкрд░ рдмрдиреЗ рд╕рдорд╛рдзрд╛рдиреЛрдВ рдХреА рдЦреЛрдЬ рдХрд░реЗрдВред", recipes_search_placeholder: "рдирд╛рдо, рд▓рдХреНрд╖реНрдп рдпрд╛ рдлрд╕рд▓ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдЦреЛрдЬреЗрдВ...", recipes_no_found: "рдХреЛрдИ рд░реЗрд╕рд┐рдкреА рдирд╣реАрдВ рдорд┐рд▓реАред рдПрдХ рдЕрд▓рдЧ рдЦреЛрдЬ рд╢рдмреНрдж рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред", recipes_card_targets: "ЁЯОп рд▓рдХреНрд╖реНрдп:", recipes_card_where: "ЁЯУН рдХрд╣рд╛рдБ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ:", recipes_card_ingredients: "ЁЯз╛ рд╕рд╛рдордЧреНрд░реА:", recipes_card_procedure: "тЪЩя╕П рдкреНрд░рдХреНрд░рд┐рдпрд╛:", recipes_card_usage: "ЁЯТб рдЙрдкрдпреЛрдЧ рдХреИрд╕реЗ рдХрд░реЗрдВ:", recipes_card_cost: "ЁЯТ░ рдЕрдиреБрдорд╛рдирд┐рдд рд▓рд╛рдЧрдд:",
        tools_title: "рдЦреЗрддреА рдХреЗ рдЙрдкрдХрд░рдг рдФрд░ рдХреИрд▓рдХреБрд▓реЗрдЯрд░", tools_subtitle: "рдЕрдкрдиреА рдЦреЗрддреА рдХреА рдЧрддрд┐рд╡рд┐рдзрд┐рдпреЛрдВ рдХреЛ рдХреБрд╢рд▓рддрд╛рдкреВрд░реНрд╡рдХ рдпреЛрдЬрдирд╛ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рд╣рдорд╛рд░реЗ рдЗрдВрдЯрд░реИрдХреНрдЯрд┐рд╡ рдЯреВрд▓ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред", calc_seeds_title: "рдмреАрдЬ рдмреЛрдиреЗ рдХрд╛ рдХреИрд▓рдХреБрд▓реЗрдЯрд░", calc_seeds_label1: "рднреВрдорд┐ рдХрд╛ рдЖрдХрд╛рд░ (рдПрдХрдбрд╝ рдореЗрдВ)", calc_seeds_label2: "рдмреАрдЬ рдХрд╛ рдкреНрд░рдХрд╛рд░", calc_seeds_button: "рдмреАрдЬ рдХреА рдЧрдгрдирд╛ рдХрд░реЗрдВ", calc_seeds_result: (amount, type, size) => `${size} рдПрдХрдбрд╝ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рд▓рдЧрднрдЧ <strong>${amount} рдХрд┐рд▓реЛ</strong> ${type} рдмреАрдЬ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛрдЧреАред`, calc_seeds_error: "рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз рднреВрдорд┐ рдХрд╛ рдЖрдХрд╛рд░ рджрд░реНрдЬ рдХрд░реЗрдВред",
        calc_pesticides_title: "рдХреАрдЯрдирд╛рд╢рдХ рдлреИрд▓рд╛рдиреЗ рд╡рд╛рд▓рд╛ рдХреИрд▓рдХреБрд▓реЗрдЯрд░", calc_pesticides_label1: "рднреВрдорд┐ рдХрд╛ рдЖрдХрд╛рд░ (рдПрдХрдбрд╝ рдореЗрдВ)", calc_pesticides_label2: "рдХреАрдЯрдирд╛рд╢рдХ рдХрд╛ рдкреНрд░рдХрд╛рд░", calc_pesticides_button: "рдХреАрдЯрдирд╛рд╢рдХреЛрдВ рдХреА рдЧрдгрдирд╛ рдХрд░реЗрдВ", calc_pesticides_result: (amount, type, size) => `${size} рдПрдХрдбрд╝ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рд▓рдЧрднрдЧ <strong>${amount} L</strong> ${type} рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛрдЧреАред`, calc_pesticides_error: "рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз рднреВрдорд┐ рдХрд╛ рдЖрдХрд╛рд░ рджрд░реНрдЬ рдХрд░реЗрдВред",
        reviews_title: "рдЧреНрд░рд╛рд╣рдХ рд╕рдореАрдХреНрд╖рд╛рдПрдВ", review_form_title: "рдПрдХ рд░рд┐рд╡реНрдпреВ рдЫреЛрдбрд╝реЗрдВ", review_label: "рдЖрдкрдХрд╛ рд░рд┐рд╡реНрдпреВ", review_button: "рд░рд┐рд╡реНрдпреВ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ",
        chatbot_title: "рдЦреЗрддреА рд╕рд╣рд╛рдпрдХ рдЪреИрдЯ рдмреЙрдЯ", chatbot_subtitle: "рдХреАрдЯреЛрдВ, рд╡реНрдпрдВрдЬрдиреЛрдВ рдпрд╛ рд╕рд╛рдорд╛рдиреНрдп рдЦреЗрддреА рдпреБрдХреНрддрд┐рдпреЛрдВ рдкрд░ рд╣рдорд╛рд░реЗ рдПрдЖрдИ рд╕рд╣рд╛рдпрдХ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред", chatbot_initial_msg: "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рдЦреЗрддреА рд╕рд╣рд╛рдпрдХ рд╣реВрдБред рдореИрдВ рдЖрдЬ рдЖрдкрдХреА рдХреНрдпрд╛ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?", chatbot_typing: "рдмреЙрдЯ рдЯрд╛рдЗрдк рдХрд░ рд░рд╣рд╛ рд╣реИ...", chatbot_send_btn: "рднреЗрдЬреЗрдВ", chatbot_user_label: "рдЖрдк:", chatbot_bot_label: "рдмреЙрдЯ:", chatbot_placeholder: "рдпрд╣рд╛рдВ рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рдЯрд╛рдЗрдк рдХрд░реЗрдВ...", chatbot_static_response: "рдореИрдВ рдПрдХ AI рд╕рд╣рд╛рдпрдХ рд╣реВрдБред рдореИрдВ рдЕрднреА рдирдИ рд╕рд╛рдордЧреНрд░реА рдирд╣реАрдВ рдмрдирд╛ рд╕рдХрддрд╛, рд▓реЗрдХрд┐рди рдореИрдВ рд╡реНрдпрдВрдЬрдиреЛрдВ рдХреЛ рдЦреЛрдЬрдиреЗ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред рд░реЗрд╕рд┐рдкреА рдЕрдиреБрднрд╛рдЧ рдореЗрдВ 'рдПрдлрд┐рдбреНрд╕' рдпрд╛ 'рдлрдВрдЧрд▓' рдЦреЛрдЬреЗрдВ!", chatbot_error: "рддреНрд░реБрдЯрд┐: рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред рдХреГрдкрдпрд╛ рдкреБрди: рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
        footer_text: "┬й 2025 рдлрд╛рд░реНрдорд┐рдВрдЧ рд╣рдмред рд╕рд░реНрд╡рд╛рдзрд┐рдХрд╛рд░ рд╕реБрд░рдХреНрд╖рд┐рддред рджреНрд╡рд╛рд░рд╛ рдмрдирд╛рдпрд╛ рдЧрдпрд╛: Saksham Bhor | рдИрдореЗрд▓:",
        admin_dashboard_title: "рдПрдбрдорд┐рди рдбреИрд╢рдмреЛрд░реНрдб", admin_recipes_title: "рд░реЗрд╕рд┐рдкреА рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░реЗрдВ", admin_recipes_id_label: "рд░реЗрд╕рд┐рдкреА рдЖрдИрдбреА (рдЕрдкрдбреЗрдЯ/рдбрд┐рд▓реАрдЯ рдХреЗ рд▓рд┐рдП)", admin_recipes_name_label: "рд░реЗрд╕рд┐рдкреА рдХрд╛ рдирд╛рдо", admin_recipes_targets_label: "рд▓рдХреНрд╖реНрдп (рдХреЙрдорд╛-рд╕реЗрдкрд░реЗрдЯреЗрдб)", admin_recipes_cost_label: "рдЕрдиреБрдорд╛рдирд┐рдд рд▓рд╛рдЧрдд (тВ╣)", admin_add_recipe: "рдЬреЛрдбрд╝реЗрдВ/рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ", admin_delete_recipe: "рдбрд┐рд▓реАрдЯ рдХрд░реЗрдВ", admin_calc_title: "рдХреИрд▓рдХреБрд▓реЗрдЯрд░ рдбреЗрдЯрд╛ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░реЗрдВ", admin_calc_type_label: "рдкреНрд░рдХрд╛рд░", admin_calc_key_label: "рдХреБрдВрдЬреА (рдЙрджрд╛рд╣рд░рдг: 'corn')", admin_calc_name_label: "рдирд╛рдо", admin_calc_amount_label: "рд░рд╛рд╢рд┐ (рдХрд┐рд▓реЛ рдпрд╛ рд▓реАрдЯрд░)", admin_add_calc: "рдЬреЛрдбрд╝реЗрдВ/рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ", admin_delete_calc: "рдбрд┐рд▓реАрдЯ рдХрд░реЗрдВ", admin_reviews_title: "рд░рд┐рд╡реНрдпреВ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░реЗрдВ",
    },
    mr: {
        nav_home: "рд╣реЛрдо", nav_recipes: "рд░реЗрд╕рд┐рдкреА", nav_tools: "рд╕рд╛рдзрдиреЗ", nav_reviews: "рдкреБрдирд░рд╛рд╡рд▓реЛрдХрдиреЗ", nav_chatbot: "рдЪреЕрдЯ рдмреЙрдЯ", nav_admin: "рдкреНрд░рд╢рд╛рд╕рдХ", nav_logout: "рд▓реЙрдЧрдЖрдЙрдЯ",
        home_title: "рдлрд╛рд░реНрдорд┐рдВрдЧ рд╣рдмрдордзреНрдпреЗ рдЖрдкрд▓реЗ рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ", home_subtitle: "рд╕реЗрдВрджреНрд░рд┐рдп рд╢реЗрддреАрдЪреЗ рдЬреНрдЮрд╛рди, рд╢рд╛рд╢реНрд╡рдд рдкрджреНрдзрддреА рдЖрдгрд┐ рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рд╕рдорд░реНрдердирд╛рд╕рд╛рдареА рддреБрдордЪреЗ рд╡рди-рд╕реНрдЯреЙрдк рдбреЗрд╕реНрдЯрд┐рдиреЗрд╢рди.",
        recipes_title: "рд╕реЗрдВрджреНрд░рд┐рдп рдХреАрдЯрдХрдирд╛рд╢рдХ рд░реЗрд╕рд┐рдкреА", recipes_subtitle: "рд╕рд╛рдорд╛рдиреНрдп рдмрд╛рдЧреЗрддреАрд▓ рдХреАрдЯрдХрд╛рдВрд╡рд░ рдиреИрд╕рд░реНрдЧрд┐рдХ, рдШрд░рдЧреБрддреА рдЙрдкрд╛рдп рд╢реЛрдзрд╛.", recipes_search_placeholder: "рдирд╛рд╡, рд▓рдХреНрд╖реНрдп рдХрд┐рдВрд╡рд╛ рдкрд┐рдХрд╛рдиреБрд╕рд╛рд░ рд╢реЛрдзрд╛...", recipes_no_found: "рдХреЛрдгрддреНрдпрд╛рд╣реА рд░реЗрд╕рд┐рдкреА рд╕рд╛рдкрдбрд▓реНрдпрд╛ рдирд╛рд╣реАрдд. рд╡реЗрдЧрд│рд╛ рд╢реЛрдз рд╢рдмреНрдж рд╡рд╛рдкрд░реВрди рдкрд╣рд╛.", recipes_card_targets: "ЁЯОп рд▓рдХреНрд╖реНрдп:", recipes_card_where: "ЁЯУН рдХреБрдареЗ рд╡рд╛рдкрд░рд╛рд╡реЗ:", recipes_card_ingredients: "ЁЯз╛ рд╕рд╛рд╣рд┐рддреНрдп:", recipes_card_procedure: "тЪЩя╕П рдкреНрд░рдХреНрд░рд┐рдпрд╛:", recipes_card_usage: "ЁЯТб рдХрд╕реЗ рд╡рд╛рдкрд░рд╛рд╡реЗ:", recipes_card_cost: "ЁЯТ░ рдЕрдВрджрд╛рдЬреЗ рдЦрд░реНрдЪ:",
        tools_title: "рд╢реЗрддреА рд╕рд╛рдзрдиреЗ рдЖрдгрд┐ рдХреЕрд▓реНрдХреНрдпреБрд▓реЗрдЯрд░", tools_subtitle: "рддреБрдордЪреНрдпрд╛ рд╢реЗрддреАрдЪреНрдпрд╛ рдХрд╛рдорд╛рдВрдЪреА рдХрд╛рд░реНрдпрдХреНрд╖рдорддреЗрдиреЗ рдпреЛрдЬрдирд╛ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рдЖрдордЪреНрдпрд╛ рдкрд░рд╕реНрдкрд░рд╕рдВрд╡рд╛рджреА рд╕рд╛рдзрдирд╛рдВрдЪрд╛ рд╡рд╛рдкрд░ рдХрд░рд╛.", calc_seeds_title: "рдмрд┐рдпрд╛рдгреЗ рдкреЗрд░рдгреА рдХреЕрд▓реНрдХреНрдпреБрд▓реЗрдЯрд░", calc_seeds_label1: "рдЬрдорд┐рдиреАрдЪрд╛ рдЖрдХрд╛рд░ (рдПрдХрд░рдордзреНрдпреЗ)", calc_seeds_label2: "рдмрд┐рдпрд╛рдгреНрдпрд╛рдЪрд╛ рдкреНрд░рдХрд╛рд░", calc_seeds_button: "рдмрд┐рдпрд╛рдгреЗ рдореЛрдЬрд╛", calc_seeds_result: (amount, type, size) => `${size} рдПрдХрд░рд╕рд╛рдареА рддреБрдореНрд╣рд╛рд▓рд╛ рдЕрдВрджрд╛рдЬреЗ <strong>${amount} рдХрд┐рд▓реЛ</strong> ${type} рдмрд┐рдпрд╛рдгреЗ рд▓рд╛рдЧреЗрд▓.`, calc_seeds_error: "рдХреГрдкрдпрд╛ рдЬрдорд┐рдиреАрдЪрд╛ рд╡реИрдз рдЖрдХрд╛рд░ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛.",
        calc_pesticides_title: "рдХреАрдЯрдХрдирд╛рд╢рдХ рдлрд╡рд╛рд░рдгреА рдХреЕрд▓реНрдХреНрдпреБрд▓реЗрдЯрд░", calc_pesticides_label1: "рдЬрдорд┐рдиреАрдЪрд╛ рдЖрдХрд╛рд░ (рдПрдХрд░рдордзреНрдпреЗ)", calc_pesticides_label2: "рдХреАрдЯрдХрдирд╛рд╢рдХ рдкреНрд░рдХрд╛рд░", calc_pesticides_button: "рдХреАрдЯрдХрдирд╛рд╢рдХреЗ рдореЛрдЬрд╛", calc_pesticides_result: (amount, type, size) => `${size} рдПрдХрд░рд╕рд╛рдареА рддреБрдореНрд╣рд╛рд▓рд╛ рдЕрдВрджрд╛рдЬреЗ <strong>${amount} L</strong> ${type} рд▓рд╛рдЧреЗрд▓.`, calc_pesticides_error: "рдХреГрдкрдпрд╛ рдЬрдорд┐рдиреАрдЪрд╛ рд╡реИрдз рдЖрдХрд╛рд░ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛.",
        reviews_title: "рдЧреНрд░рд╛рд╣рдХ рдкреБрдирд░рд╛рд╡рд▓реЛрдХрдиреЗ", review_form_title: "рдПрдХ рдкреБрдирд░рд╛рд╡рд▓реЛрдХрди рджреНрдпрд╛", review_label: "рддреБрдордЪреЗ рдкреБрдирд░рд╛рд╡рд▓реЛрдХрди", review_button: "рдкреБрдирд░рд╛рд╡рд▓реЛрдХрди рд╕рдмрдорд┐рдЯ рдХрд░рд╛",
        chatbot_title: "рд╢реЗрддреА рд╕рд╣рд╛рдпрдХ рдЪреЕрдЯ рдмреЙрдЯ", chatbot_subtitle: "рдХреАрдЯрдХ, рд░реЗрд╕рд┐рдкреА рдХрд┐рдВрд╡рд╛ рд╕рд╛рдорд╛рдиреНрдп рд╢реЗрддреА рдЯрд┐рдкреНрд╕рд╕рд╛рдареА рдЖрдордЪреНрдпрд╛ AI рд╕рд╣рд╛рдпреНрдпрд╛рд▓рд╛ рд╡рд┐рдЪрд╛рд░рд╛.", chatbot_initial_msg: "рдирдорд╕реНрдХрд╛рд░! рдореА рддреБрдордЪрд╛ рд╢реЗрддреА рд╕рд╣рд╛рдпрдХ рдЖрд╣реЗ. рдореА рдЖрдЬ рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд╢реА рдорджрдд рдХрд░реВ рд╢рдХрддреЛ?", chatbot_typing: "рдмреЙрдЯ рдЯрд╛рдЗрдк рдХрд░рдд рдЖрд╣реЗ...", chatbot_send_btn: "рдкрд╛рдард╡рд╛", chatbot_user_label: "рддреБрдореНрд╣реА:", chatbot_bot_label: "рдмреЙрдЯ:", chatbot_placeholder: "рдпреЗрдереЗ рддреБрдордЪрд╛ рдкреНрд░рд╢реНрди рдЯрд╛рдЗрдк рдХрд░рд╛...", chatbot_static_response: "рдореА рдПрдХ AI рд╕рд╣рд╛рдпрдХ рдЖрд╣реЗред рдореА рдЖрддреНрддрд╛ рдирд╡реАрди рд╕рд╛рдордЧреНрд░реА рддрдпрд╛рд░ рдХрд░реВ рд╢рдХрдд рдирд╛рд╣реА, рдкрдг рдореА рддреБрдореНрд╣рд╛рд▓рд╛ рд░реЗрд╕рд┐рдкреА рд╢реЛрдзрдгреНрдпрд╛рдд рдорджрдд рдХрд░реВ рд╢рдХрддреЛред рд░реЗрд╕рд┐рдкреА рд╡рд┐рднрд╛рдЧрд╛рдд 'рдНрдлрд┐рдбреНрд╕' рдХрд┐рдВрд╡рд╛ 'рдлрдВрдЧрд▓' рд╢реЛрдзрдгреНрдпрд╛рдЪрд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛!", chatbot_error: "рддреНрд░реБрдЯреА: рдкреНрд░рддрд┐рд╕рд╛рдж рдорд┐рд│рд╡рд┐рдгреНрдпрд╛рдд рдЕрдпрд╢рд╕реНрд╡реА. рдХреГрдкрдпрд╛ рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛ред",
                footer_text: "┬й 2025 рдлрд╛рд░реНрдорд┐рдВрдЧ рд╣рдм. рд╕рд░реНрд╡ рд╣рдХреНрдХ рд░рд╛рдЦреАрд╡. рдмрдирд╡рдгрд╛рд░реЗ: Saksham Bhor | рдИрдореЗрд▓:",
        admin_dashboard_title: "рдкреНрд░рд╢рд╛рд╕рдХ рдбреЕрд╢рдмреЛрд░реНрдб", admin_recipes_title: "рд░реЗрд╕рд┐рдкреА рд╡реНрдпрд╡рд╕реНрдерд╛рдкрд┐рдд рдХрд░рд╛", admin_recipes_id_label: "рд░реЗрд╕рд┐рдкреА рдЖрдпрдбреА (рдЕрдкрдбреЗрдЯ/рдбрд┐рд▓реАрдЯрд╕рд╛рдареА)", admin_recipes_name_label: "рд░реЗрд╕рд┐рдкреАрдЪреЗ рдирд╛рд╡", admin_recipes_targets_label: "рд▓рдХреНрд╖реНрдп (рдХреЙрдорд╛-рд╕реЗрдкрд░реЗрдЯреЗрдб)", admin_recipes_cost_label: "рдЕрдВрджрд╛рдЬреЗ рдЦрд░реНрдЪ (тВ╣)", admin_add_recipe: "рдЬреЛрдбрд╛/рдЕрдкрдбреЗрдЯ рдХрд░рд╛", admin_delete_recipe: "рдбрд┐рд▓реАрдЯ рдХрд░рд╛", admin_reviews_title: "рдкреБрдирд░рд╛рд╡рд▓реЛрдХрдиреЗ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрд┐рдд рдХрд░рд╛",
            },
        };

        const currentLang = localStorage.getItem('language') || 'en';

        let recipesData = [];
        let seedData = {};
        let pesticideData = {};
        let reviewsData = [];

        // --- Data Fetching and Real-time Listeners ---
        function fetchAllData() {
            onSnapshot(collection(db, "recipes"), (snapshot) => {
                recipesData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderRecipes(recipesData);
            });
            onSnapshot(collection(db, "seedData"), (snapshot) => {
                seedData = snapshot.docs.reduce((acc, doc) => ({ ...acc, [doc.id]: doc.data() }), {});
                updateSeedDropdown();
            });
            onSnapshot(collection(db, "pesticideData"), (snapshot) => {
                pesticideData = snapshot.docs.reduce((acc, doc) => ({ ...acc, [doc.id]: doc.data() }), {});
                updatePesticideDropdown();
            });
            onSnapshot(collection(db, "reviews"), (snapshot) => {
                reviewsData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderReviews(reviewsData);
                renderAdminReviews();
            });
        }

        function updateSeedDropdown() {
            const select = document.getElementById('seed-type');
            select.innerHTML = '';
            for (const key in seedData) {
                const option = document.createElement('option');
                option.value = key;
                option.text = seedData[key][currentLang];
                select.appendChild(option);
            }
        }

        function updatePesticideDropdown() {
            const select = document.getElementById('pesticide-type');
            select.innerHTML = '';
            for (const key in pesticideData) {
                const option = document.createElement('option');
                option.value = key;
                option.text = pesticideData[key][currentLang];
                select.appendChild(option);
            }
        }

        // --- UI Rendering Functions ---
        function showSection(sectionId) {
            document.querySelectorAll('.section').forEach(section => {
                section.classList.remove('active');
            });
            document.getElementById(sectionId).classList.add('active');
            document.querySelectorAll('.nav-links a').forEach(link => {
                link.classList.remove('active');
            });
            const activeLink = document.querySelector(`.nav-links a[data-section="${sectionId}"]`);
            if (activeLink) {
                activeLink.classList.add('active');
            }
            const navMenu = document.getElementById('nav-menu');
            if (navMenu.classList.contains('active')) {
                toggleNav();
            }
            if (sectionId === 'recipes-section') {
                renderRecipes(recipesData);
            }
            if (sectionId === 'admin-section') {
                renderAdminReviews();
            }
        }

        function toggleNav() {
            document.getElementById('nav-menu').classList.toggle('active');
        }

        function renderRecipes(list) {
            const container = document.getElementById('recipe-container');
            const lang = document.getElementById('language-selector').value;
            if (!container) return;
            container.innerHTML = '';
            if (list.length === 0) {
                container.innerHTML = `<p class="col-span-full text-center text-gray-500 text-lg">${translations[lang].recipes_no_found}</p>`;
                return;
            }
            list.forEach((recipe, index) => {
                const card = document.createElement('div');
                card.className = 'recipe-card';
                card.style.animationDelay = `${index * 0.1}s`;
                card.innerHTML = `
                    <h2 class="text-2xl font-bold text-green-600 mb-2">${recipe.name[lang]}</h2>
                    <p class="text-sm text-gray-500 mb-4">ID: ${recipe.id}</p>
                    <div class="mb-3"><strong>${translations[lang].recipes_card_targets}</strong> <span class="text-gray-700">${recipe.targets[lang].join(', ')}</span></div>
                    <div class="mb-3"><strong>${translations[lang].recipes_card_where}</strong> <span class="text-gray-700">${recipe.where[lang].join(', ')}</span></div>
                    <div class="mb-3"><strong>${translations[lang].recipes_card_ingredients}</strong>
                        <ul class="list-disc list-inside mt-1">${recipe.ingredients[lang].map(i=>`<li>${i}</li>`).join('')}</ul>
                    </div>
                    <div class="mb-3"><strong>${translations[lang].recipes_card_procedure}</strong>
                        <ol class="list-decimal list-inside mt-1">${recipe.procedure[lang].map(p=>`<li>${p}</li>`).join('')}</ol>
                    </div>
                    <div class="mb-3"><strong>${translations[lang].recipes_card_usage}</strong>
                        <ul class="list-disc list-inside mt-1">${recipe.usage[lang].map(u=>`<li>${u}</li>`).join('')}</ul>
                    </div>
                    <div><strong>${translations[lang].recipes_card_cost}</strong> <span class="text-gray-700">тВ╣${recipe.cost}</span></div>
                `;
                container.appendChild(card);
            });
        }

        function renderReviews(list) {
            const container = document.getElementById('reviews-container');
            if (!container) return;
            container.innerHTML = '';
            list.forEach(review => {
                const card = document.createElement('div');
                card.className = 'bg-white p-6 rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300';
                card.innerHTML = `
                    <p class="text-gray-600 italic mb-4">"${review.text}"</p>
                    <p class="font-semibold">- ${review.userEmail}</p>
                `;
                container.appendChild(card);
            });
        }

        function renderAdminReviews() {
            const container = document.getElementById('admin-reviews-list');
            container.innerHTML = '';
            reviewsData.forEach(review => {
                const card = document.createElement('div');
                card.className = 'admin-card p-4 rounded-lg shadow-md flex justify-between items-center';
                card.innerHTML = `
                    <div>
                        <p class="text-gray-300 italic">"${review.text}"</p>
                        <p class="font-semibold text-white">- ${review.userEmail} (ID: ${review.id})</p>
                    </div>
                    <button onclick="deleteReview(event, '${review.id}')" class="bg-red-600 text-white py-1 px-3 rounded-full hover:bg-red-700 transition-colors duration-300 btn-press">Delete</button>
                `;
                container.appendChild(card);
            });
        }

        // --- Data Management Functions ---
        async function addReview(event) {
            event.preventDefault();
            const reviewText = document.getElementById('review-text').value;
            if (!reviewText) return;
            const user = window.currentUser;
            if (!user) {
                alert("Please log in to leave a review.");
                return;
            }
            try {
                await addDoc(collection(db, "reviews"), {
                    userEmail: user.email,
                    text: reviewText,
                    createdAt: new Date()
                });
                document.getElementById('review-text').value = '';
                alert("Review submitted successfully!");
            } catch (error) {
                console.error("Error adding review: ", error);
                alert("Error submitting review!");
            }
        }

        async function deleteReview(event, reviewId) {
            event.preventDefault();
            if (!window.currentUser || window.currentUser.role !== 'admin') return;
            if (!confirm("Are you sure you want to delete this review?")) return;
            try {
                await deleteDoc(doc(db, "reviews", reviewId));
                alert('Review deleted!');
            } catch (error) {
                console.error("Error deleting review: ", error);
                alert('Error deleting review!');
            }
        }

        async function addUpdateRecipe(event) {
            event.preventDefault();
            if (!window.currentUser || window.currentUser.role !== 'admin') return;

            const id = document.getElementById('recipe-id').value;
            const name_en = document.getElementById('recipe-name-en').value;
            const name_hi = document.getElementById('recipe-name-hi').value;
            const name_mr = document.getElementById('recipe-name-mr').value;
            const targets_en = document.getElementById('recipe-targets-en').value.split(',').map(s => s.trim());
            const targets_hi = document.getElementById('recipe-targets-hi').value.split(',').map(s => s.trim());
            const targets_mr = document.getElementById('recipe-targets-mr').value.split(',').map(s => s.trim());
            const where_en = document.getElementById('recipe-where-en').value.split(',').map(s => s.trim());
            const where_hi = document.getElementById('recipe-where-hi').value.split(',').map(s => s.trim());
            const where_mr = document.getElementById('recipe-where-mr').value.split(',').map(s => s.trim());
            const ingredients_en = document.getElementById('recipe-ingredients-en').value.split(',').map(s => s.trim());
            const ingredients_hi = document.getElementById('recipe-ingredients-hi').value.split(',').map(s => s.trim());
            const ingredients_mr = document.getElementById('recipe-ingredients-mr').value.split(',').map(s => s.trim());
            const procedure_en = document.getElementById('recipe-procedure-en').value.split(',').map(s => s.trim());
            const procedure_hi = document.getElementById('recipe-procedure-hi').value.split(',').map(s => s.trim());
            const procedure_mr = document.getElementById('recipe-procedure-mr').value.split(',').map(s => s.trim());
            const usage_en = document.getElementById('recipe-usage-en').value.split(',').map(s => s.trim());
            const usage_hi = document.getElementById('recipe-usage-hi').value.split(',').map(s => s.trim());
            const usage_mr = document.getElementById('recipe-usage-mr').value.split(',').map(s => s.trim());
            const cost = parseFloat(document.getElementById('recipe-cost').value);

            if (!name_en || !name_hi || !name_mr || !targets_en || isNaN(cost)) return;

            const recipeData = {
                name: { en: name_en, hi: name_hi, mr: name_mr },
                targets: { en: targets_en, hi: targets_hi, mr: targets_mr },
                where: { en: where_en, hi: where_hi, mr: where_mr },
                ingredients: { en: ingredients_en, hi: ingredients_hi, mr: ingredients_mr },
                procedure: { en: procedure_en, hi: procedure_hi, mr: procedure_mr },
                usage: { en: usage_en, hi: usage_hi, mr: usage_mr },
                cost: cost,
            };

            try {
                if (id) {
                    await setDoc(doc(db, "recipes", id), recipeData);
                } else {
                    await addDoc(collection(db, "recipes"), recipeData);
                }
                alert('Recipe saved successfully!');
            } catch (error) {
                console.error("Error saving recipe: ", error);
                alert('Error saving recipe!');
            }
        }

        async function deleteRecipe(event) {
            event.preventDefault();
            if (!window.currentUser || window.currentUser.role !== 'admin') return;
            const id = document.getElementById('recipe-id').value;
            if (!id) return;
            if (confirm("Are you sure you want to delete this recipe?")) {
                try {
                    await deleteDoc(doc(db, "recipes", id));
                    alert('Recipe deleted!');
                } catch (error) {
                    console.error("Error deleting recipe: ", error);
                    alert('Error deleting recipe!');
                }
            }
        }

        async function addUpdateCalcData() {
            if (!window.currentUser || window.currentUser.role !== 'admin') return;

            const type = document.getElementById('calc-type-select').value;
            const key = document.getElementById('calc-key').value;
            const name_en = document.getElementById('calc-name-en').value;
            const name_hi = document.getElementById('calc-name-hi').value;
            const name_mr = document.getElementById('calc-name-mr').value;
            const amount = parseFloat(document.getElementById('calc-amount').value);

            if (!key || !name_en || !name_hi || !name_mr || isNaN(amount)) return;

            const data = {
                en: name_en,
                hi: name_hi,
                mr: name_mr,
                amount: amount
            };
            
            try {
                await setDoc(doc(db, `${type}Data`, key), data);
                alert(`${type} data saved successfully!`);
            } catch (error) {
                console.error("Error saving calculator data: ", error);
                alert("Error saving calculator data.");
            }
        }

        async function deleteCalcData() {
            if (!window.currentUser || window.currentUser.role !== 'admin') return;
            const type = document.getElementById('calc-type-select').value;
            const key = document.getElementById('calc-key').value;
            if (!key) return;
            if (confirm("Are you sure you want to delete this calculator data?")) {
                try {
                    await deleteDoc(doc(db, `${type}Data`, key));
                    alert('Data deleted!');
                } catch (error) {
                    console.error("Error deleting data: ", error);
                    alert("Error deleting data.");
                }
            }
        }

        // --- UI Logic and Initialization ---

        function filterRecipes() {
            const keyword = document.getElementById('search').value.toLowerCase();
            const lang = document.getElementById('language-selector').value;
            const filtered = recipesData.filter(r => {
                const name = r.name[lang] ? r.name[lang].toLowerCase() : '';
                const targets = r.targets[lang] ? r.targets[lang].join(' ').toLowerCase() : '';
                const where = r.where[lang] ? r.where[lang].join(' ').toLowerCase() : '';
                return name.includes(keyword) || targets.includes(keyword) || where.includes(keyword);
            });
            renderRecipes(filtered);
        }

        function updateTextContent(lang) {
            document.querySelectorAll('[data-key]').forEach(element => {
                const key = element.getAttribute('data-key');
                if (translations[lang] && translations[lang][key]) {
                    if (typeof translations[lang][key] === 'function') {
                        // This is for dynamic text like calculator results
                    } else {
                        element.innerHTML = translations[lang][key];
                    }
                }
            });
            
            const searchInput = document.getElementById('search');
            if(searchInput) searchInput.placeholder = translations[lang].recipes_search_placeholder;
            renderRecipes(recipesData);
            updateSeedDropdown();
            updatePesticideDropdown();
            renderReviews(reviewsData);
            renderAdminReviews();
        }

        function setLanguage(lang) {
            localStorage.setItem('language', lang);
            updateTextContent(lang);
        }

        // Initial fetch and render
        window.onload = function() {
            fetchAllData();
            updateTextContent(currentLang);
            document.getElementById('language-selector').value = currentLang;
        };

        // Expose global functions
        window.showSection = showSection;
        window.toggleNav = toggleNav;
        window.setLanguage = setLanguage;
        window.filterRecipes = filterRecipes;
        window.calculateSeeds = calculateSeeds;
        window.calculatePesticides = calculatePesticides;
        window.sendMessage = sendMessage;
        window.userLogout = userLogout;
        window.loginAsUser = loginAsUser;
        window.loginAsAdmin = loginAsAdmin;
        window.addReview = addReview;
        window.deleteReview = deleteReview;
        window.addUpdateRecipe = addUpdateRecipe;
        window.deleteRecipe = deleteRecipe;
        window.addUpdateCalcData = addUpdateCalcData;
        window.deleteCalcData = deleteCalcData;
        window.calculateSeeds = function() {
            const landSize = parseFloat(document.getElementById('land-size-seeds').value);
            const seedType = document.getElementById('seed-type').value;
            const seedDataForType = seedData[seedType];
            const resultElement = document.getElementById('seed-result');
            const lang = document.getElementById('language-selector').value;

            resultElement.classList.remove('show');
            void resultElement.offsetWidth;
            
            if (landSize && seedDataForType) {
                const requiredAmount = landSize * seedDataForType.amount;
                const seedName = seedDataForType[lang];
                resultElement.innerHTML = translations[lang].calc_seeds_result(requiredAmount, seedName, landSize);
                resultElement.classList.remove('hidden');
                resultElement.classList.add('show');
            } else {
                resultElement.innerHTML = translations[lang].calc_seeds_error;
                resultElement.classList.remove('hidden');
                resultElement.classList.add('show');
            }
        };
        window.calculatePesticides = function() {
            const landSize = parseFloat(document.getElementById('land-size-pesticide').value);
            const pesticideType = document.getElementById('pesticide-type').value;
            const pesticideDataForType = pesticideData[pesticideType];
            const resultElement = document.getElementById('pesticide-result');
            const lang = document.getElementById('language-selector').value;
            
            resultElement.classList.remove('show');
            void resultElement.offsetWidth;
            
            if (landSize && pesticideDataForType) {
                const requiredAmount = landSize * pesticideDataForType.amount;
                const pesticideName = pesticideDataForType[lang];
                resultElement.innerHTML = translations[lang].calc_pesticides_result(requiredAmount, pesticideName, landSize);
                resultElement.classList.remove('hidden');
                resultElement.classList.add('show');
            } else {
                resultElement.innerHTML = translations[lang].calc_pesticides_error;
                resultElement.classList.remove('hidden');
                resultElement.classList.add('show');
            }
        };
    </script>
</body>
</html>
